// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.web;

import com.springsource.petclinic.domain.Owner;
import com.springsource.petclinic.domain.Pet;
import com.springsource.petclinic.reference.PetType;
import com.springsource.petclinic.web.PetController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect PetController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PetController.showJson(@PathVariable("id") Long id) {
        Pet pet = Pet.findPet(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (pet == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(pet.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PetController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Pet> result = Pet.findAllPets();
        return new ResponseEntity<String>(Pet.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PetController.createFromJson(@RequestBody String json) {
        Pet pet = Pet.fromJsonToPet(json);
        pet.persist();
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PetController.createFromJsonArray(@RequestBody String json) {
        for (Pet pet: Pet.fromJsonArrayToPets(json)) {
            pet.persist();
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PetController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Pet pet = Pet.fromJsonToPet(json);
        if (pet.merge() == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PetController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Pet pet: Pet.fromJsonArrayToPets(json)) {
            if (pet.merge() == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> PetController.deleteFromJson(@PathVariable("id") Long id) {
        Pet pet = Pet.findPet(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (pet == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        pet.remove();
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByNameAndWeight", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PetController.jsonFindPetsByNameAndWeight(@RequestParam("name") String name, @RequestParam("weight") Float weight) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Pet.toJsonArray(Pet.findPetsByNameAndWeight(name, weight).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByOwner", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PetController.jsonFindPetsByOwner(@RequestParam("owner") Owner owner) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Pet.toJsonArray(Pet.findPetsByOwner(owner).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=BySendRemindersAndWeightLessThan", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PetController.jsonFindPetsBySendRemindersAndWeightLessThan(@RequestParam(value = "sendReminders", required = false) boolean sendReminders, @RequestParam("weight") Float weight) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Pet.toJsonArray(Pet.findPetsBySendRemindersAndWeightLessThan(sendReminders, weight).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByTypeAndNameLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PetController.jsonFindPetsByTypeAndNameLike(@RequestParam("type") PetType type, @RequestParam("name") String name) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Pet.toJsonArray(Pet.findPetsByTypeAndNameLike(type, name).getResultList()), headers, HttpStatus.OK);
    }
    
}
